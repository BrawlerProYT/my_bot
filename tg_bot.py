import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import yt_dlp
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_BOT_TOKEN = "7746230370:AAGqP9HCv4thXXnHv67rVd8iB75rTMWn8H0"
DEVELOPER_ID = 8213990877  # üëâ —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("TG-Music-Bot")

# –•—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_results = {}
# –•—Ä–∞–Ω–∏–º ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤
active_chats = set()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    active_chats.add(chat_id)  # –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö

    await update.message.reply_text(
        "üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *TG Musik Bot*! üéµ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏ —è –Ω–∞–π–¥—É –µ—ë –Ω–∞ YouTube üîé",
        parse_mode="Markdown",
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∏—Å–∫) ===
async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.effective_chat.id
    text = update.message.text

    # –ª–æ–≥–∏—Ä—É–µ–º
    logger.info(f"[{chat_id}] {update.message.from_user.username or user_id}: {text}")
    active_chats.add(chat_id)

    # –µ—Å–ª–∏ –ø–∏—à–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    if user_id == DEVELOPER_ID:
        await broadcast_message(context, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n\n{text}")
        return

    await update.message.reply_text(f"üîé –ò—â—É *{text}* ...", parse_mode="Markdown")

    try:
        # ‚ö° –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ (5 —Ç—Ä–µ–∫–æ–≤)
        ydl_opts = {
            "quiet": True,
            "skip_download": True,
            "default_search": "ytsearch5",
            "extract_flat": True,  # —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(text, download=False)

        results = []
        for entry in info.get("entries", []):
            results.append(
                {
                    "title": entry.get("title"),
                    "id": entry.get("id"),
                    "url": f"https://www.youtube.com/watch?v={entry['id']}",
                }
            )

        if not results:
            await update.message.reply_text("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_search_results[user_id] = results

        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ (5 –∫–Ω–æ–ø–æ–∫)
        keyboard = []
        for i, track in enumerate(results[:5]):
            keyboard.append(
                [
                    InlineKeyboardButton(
                        track["title"][:40], callback_data=f"choose_{i}"
                    )
                ]
            )

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üé∂ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ üëá", reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
async def send_result(update, context, user_id, index):
    results = user_search_results.get(user_id, [])
    if not results or index >= len(results):
        await context.bot.send_message(user_id, "‚ö†Ô∏è –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return

    track = results[index]
    keyboard = [
        [InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{index}")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data=f"next_{index+1}")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if isinstance(update, Update):
        chat_id = update.effective_chat.id
    else:
        chat_id = update.message.chat_id if update.message else user_id

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"*{track['title']}*\n{track['url']}",
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    # –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    if data.startswith("choose_"):
        index = int(data.split("_")[1])
        await send_result(query, context, user_id, index)

    # —Å–∫–∞—á–∞—Ç—å
    elif data.startswith("download_"):
        index = int(data.split("_")[1])
        await download_audio(query, context, user_id, index)

    # —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    elif data.startswith("next_"):
        index = int(data.split("_")[1])
        await send_result(query, context, user_id, index)


# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ ===
async def download_audio(query, context, user_id, index):
    results = user_search_results.get(user_id, [])
    if not results or index >= len(results):
        await context.bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    track = results[index]
    url = track["url"]

    await query.edit_message_text(
        f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é: *{track['title']}* ...", parse_mode="Markdown"
    )

    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": f"{user_id}_%(id)s.%(ext)s",
        "quiet": True,
        "postprocessors": [
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }
        ],
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            file_name = f"{user_id}_{info['id']}.mp3"

        await context.bot.send_audio(
            chat_id=user_id, audio=open(file_name, "rb"), title=track["title"]
        )
        os.remove(file_name)

    except Exception as e:
        logger.error(e)
        await context.bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")


# === –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ===
async def broadcast_message(context, text: str):
    for chat_id in list(active_chats):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            active_chats.discard(chat_id)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_query))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("TG Musik Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()


if __name__ == "__main__":
    main()
